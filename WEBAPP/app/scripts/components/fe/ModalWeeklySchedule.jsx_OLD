import React, { PropTypes } from 'react';
import Modal from 'react-modal';
import { SideNav } from 'react-sidenav';
import DatePicker from 'react-datepicker';
import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';
import 'react-datepicker/dist/react-datepicker.css';

import moment from 'moment';
// import { DateQuery } from 'util/DateFormatter';

const customStyles = {
  content: {
    position: 'absolute',
    top: '150px',
    left: '70px',
    right: '40px',
    bottom: 'auto',
    overflow: 'auto',
    WebkitOverflowScrolling: 'touch',
    outline: 'none',
    padding: '20px',
  },
  overlay: {
    zIndex: '1050',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
};

const rightStyle = {
  color: '#333333 !important',
};

const optionFormaDid = [
  'Lezione',
  'Esercitazioni',
];

const optionRange = [
  'none',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  '10',
].map((v, i) => <option key={i} value={v}>{v} {!i || 'mins'}</option>);

const navDays = [
  { id: 'monday', text: 'lunedì' },
  { id: 'tuesday', text: 'martedì' },
  { id: 'wednesday', text: 'mercoledì' },
  { id: 'thursday', text: 'giovedì' },
  { id: 'friday', text: 'venerdì' },
  { id: 'saturday', text: 'sabato' },
  { id: 'sunday', text: 'domenica' },
];

const selectRowProp = {
  mode: 'radio', // or checkbox
  clickToSelect: false,
};

const editRowProp = {
  mode: 'click',
  blurToSave: true,
  // afterSaveCell: onAfterSaveCell,
};

/*
function actionFormatter(cell) {
  return (
    <button
      type="button"
      className="btn btn-warning react-bs-table-add-btn"
      onClick={this.deleteRow(cell)}
    >
      <i className="glyphicon glyphicon-trash"></i>
      Elimina
    </button>
  );
}
*/

function aoIndexOf(myArray, searchTerm, property) {
  for (let i = 0, len = myArray.length; i < len; i++) {
    if (myArray[i][property] === searchTerm) return i;
  }
  return -1;
}

function hourStartValidator(value) {
  const isValid = /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/.test(value);
  if (!isValid) {
    return 'Valore non ammissibile';
  }
  return isValid;
}

class ModalWeeklySchedule extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      indexRow: 0,
      modalIsOpen: true,
      rules: [],
      optionRange,
      selected: 'monday',
      occurrences: {
        monday: [],
        tuesday: [],
        wednesday: [],
        thursday: [],
        friday: [],
        saturday: [],
        sunday: [],
      },
      startDate: moment(),
    };
  }

  setTableRef = (ref) => { this.tableRef = ref; }

  openModal = () => {
    this.setState({
      modalIsOpen: true,
    });
  }

  actionFormatter = (cell) => {
    if (cell) {
      return (
        <button
          type="button"
          className="btn btn-warning react-bs-table-add-btn"
          onClick={this.deleteRow(cell)}
        >
          <i className="glyphicon glyphicon-trash"></i>
          Elimina
        </button>
      );
    }
    return false;
  }

  addRow = () => {
    const emptyRow = {
      rowId: `${this.state.indexRow}`,
      hourStart: '',
      duration: '',
      room: '',
      place: '',
      formaDid: '',
    };
    const result = this.tableRef.handleAddRow(emptyRow);
    if (result) {
      console.log('errore!', result);
    } else {
      this.state.occurrences[this.state.selected].push(emptyRow);
      this.state.indexRow++;
    }
  }

  deleteRow = (rowId) => {
    const indexKey = aoIndexOf(this.state.occurrences[this.state.selected], rowId, 'rowId');
    console.log('che valori ho', rowId);
    this.tableRef.handleDropRow(rowId);
    this.state.occurrences[this.state.selected].splice(indexKey, 1);
  }

  handleChangeStart = (date) => {
    this.setState({
      startDate: date,
    });
  }

  handleChangeEnd = (date) => {
    this.setState({
      endDate: date,
    });
  }

  handleChangeDay = (selection) => {
    this.setState({
      selected: selection.id,
    });
  }

  saveModal = () => {
    this.props.onSaveClick(this.state.occurrences, this.state.startDate, this.state.endDate);
    this.setState({
      modalIsOpen: false,
      occurrences: {
        monday: [],
        tuesday: [],
        wednesday: [],
        thursday: [],
        friday: [],
        saturday: [],
        sunday: [],
      },
      selected: 'monday',
      startDate: moment(),
    });
  }

  closeModal = () => {
    this.setState({
      modalIsOpen: false,
      occurrences: {
        monday: [],
        tuesday: [],
        wednesday: [],
        thursday: [],
        friday: [],
        saturday: [],
        sunday: [],
      },
      selected: 'monday',
      startDate: moment(),
    });
  }

  render() {
    return (
      <div>
        <button type="button" className="btn btn-xs btn-success" onClick={this.openModal}>
          <i className="glyphicon glyphicon-plus"></i>Add condition
        </button>
        <Modal
          isOpen={this.state.modalIsOpen}
          onAfterOpen={this.afterOpenModal}
          onRequestClose={this.closeModal}
          style={customStyles}
          className="Modal__Bootstrap modal-dialog modal-lg"
        >
          <div className="modal-content">
            <div className="modal-header withaliceblue">
              <button type="button" className="close" onClick={this.closeModal}>
                <span aria-hidden="true">&times;</span>
                <span className="sr-only">Close</span>
              </button>
              <h4 className="modal-title">Inserisci Orario settimanale</h4>
              <p>Spiega di cosa deve fare il docente quando atterra in questa pagina</p>
            </div>
            <div className="modal-body row no-vertical-padding">
              <div className="row text-center range-date-picker">
                <div className="col-md-6">
                  <span className="spanlabel">Data inizio corso</span>
                  <DatePicker
                    selected={this.state.startDate}
                    startDate={this.state.startDate}
                    endDate={this.state.endDate}
                    onChange={this.handleChangeStart}
                  />
                </div>
                <div className="col-md-6">
                  <span className="spanlabel">Data fine corso</span>
                  <DatePicker
                    selected={this.state.endDate}
                    startDate={this.state.startDate}
                    endDate={this.state.endDate}
                    onChange={this.handleChangeEnd}
                  />
                </div>
              </div>
              <div className="col-md-2 border-right no-padding">
                <SideNav
                  selected={this.state.selected}
                  navs={navDays}
                  style={rightStyle}
                  onSelection={this.handleChangeDay}
                />
              </div>
              <div className="col-md-10">
                <BootstrapTable
                  data={this.state.occurrences[this.state.selected]}
                  selectRow={selectRowProp}
                  cellEdit={editRowProp}
                  ref={this.setTableRef}
                >
                  <TableHeaderColumn
                    dataField="hourStart"
                    editable={{ validator: hourStartValidator }}
                  >Ora Inizio</TableHeaderColumn>
                  <TableHeaderColumn dataField="duration">Durata</TableHeaderColumn>
                  <TableHeaderColumn dataField="room">Aula</TableHeaderColumn>
                  <TableHeaderColumn dataField="place">Sede</TableHeaderColumn>
                  <TableHeaderColumn
                    dataField="formaDid"
                    editable={{ type: 'select', options: { values: optionFormaDid } }}
                  >Forma Did.</TableHeaderColumn>
                  <TableHeaderColumn
                    dataField="rowId"
                    dataFormat={this.actionFormatter}
                    editable={false}
                    isKey
                  >id</TableHeaderColumn>
                </BootstrapTable>
                <div className="row vmg5 text-center">
                  <div className="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <div className="btn-group btn-group-sm" role="group">
                      <button
                        type="button"
                        className="btn btn-info react-bs-table-add-btn"
                        onClick={this.addRow}
                      >
                        <i className="glyphicon glyphicon-plus"></i>
                        Aggiungi lezione
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="modal-footer withaliceblue">
              <button
                type="button"
                className="btn btn-default"
                onClick={this.closeModal}
              >
                Chiudi
              </button>
              <button
                type="button"
                className="btn btn-primary"
                onClick={this.saveModal}
              >
                Salva
              </button>
            </div>
          </div>
        </Modal>
      </div>
    );
  }
}

ModalWeeklySchedule.propTypes = {
  onSaveClick: PropTypes.func.isRequired,
};

export default ModalWeeklySchedule;
